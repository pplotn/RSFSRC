from __future__ import print_function
import os, string, glob, shutil
import rsf.sftour
import rsf.doc
import rsf.prog

books = '''
bei
gee
'''

reports = '''
cwp
data
geo384w
geo391
hansung
icp
jlu
milano
rsf
sep
slim
swag
tccs
tongji
trip
tutorial
uwa
xjtu
'''

nonreproducible = '''
data/teapotdome/fetch
data/teapotdome/scdecon
data/teapotdome/vels
gee/pch/patch
geo391/hw2/sorting
rsf/bash/mpi
rsf/bash/plot
rsf/rsf/plplot
rsf/rsf/sfnderiv
rsf/programming/cube
rsf/programming/svd
rsf/school2012/plot
rsf/school2015/matlab
rsf/tutorials/colormaps
rsf/tutorials/petro1
rsf/tutorials/spitz
slim/geo2008NewInsightsPareto/geop
slim/geo2008NewInsightsPareto/pareto
slim/slimUserManual/sffdct
tccs/atten/karman1
tccs/diffr/chan3d
tccs/diffr/gom
tccs/avo/avo2
tccs/opwd/wrap
tccs/emdpf/fxdecon
tccs/emdpf/hyper
tccs/emdpf/linear
tccs/fpwd/sigmoid
trip/hug/marm1s_shallow
tccs/synwav/gch1
tccs/shemd/hyperoil
tccs/shemd/synth1
tccs/shemd/fxemddemo
tccs/shemd/fxmssademo
tccs/timelapse/timelapse
xjtu/primer/testelastic2d
'''

all =  ARGUMENTS.get('all', 'n')
size = int(ARGUMENTS.get('size', 1024))
size *= 1024

tested_projects = []

def publicproj(project):
    '''Check if the project is publicly accessible'''
    global all, size, tested_projects
    if project in tested_projects:
        return False
    tested_projects.append(project)
    if project in Split(nonreproducible):
        print('%s: Non-reproducible' % project)
        return False
    if not os.path.isdir(project):
        print('%s: No such directory' % project)
        return False
    os.chdir(project)
    # Skip if no .rsfproj
    if not os.path.isfile('.rsfproj'):
        print('%s: No rsfproj' % project)
        return False
    # OK if all=y on the command line
    if all == 'y':
        return True
    # OK if no PRIVATE data
    g = {}
    l = {}
    exec(compile(open('.rsfproj').read(), '.rsfproj', 'exec'),g,l)
    if 'PRIVATE' in l['data'] or 'LOCAL' in l['data']:
        print('%s: Private or local data' % project)
        return False
    if not 'size' in l or l['size'] <= 0:
        print('%s: Wrong size' % project)
        return False
    if size > 0 and l['size'] > size:
        print('%s: Large size' % project)
        return False
    return True

def progtest(target=None,source=None,env=None):
    cwd = os.getcwd()
    testdir = os.environ.get('CIRCLE_ARTIFACTS')
    for project in env.get('projects'):
        if publicproj(project):
            print('Testing in %s' % project)
            print('-----------' + '-'*len(project))
            if os.system('scons test'):
                if testdir and os.path.isdir(testdir):
                    for vpl in glob.glob('Fig/*.vpl'):
                        shutil.copy2(vpl,testdir)
                return 1
        os.chdir(cwd)            
    return 0

def www(target=None,source=None,env=None):
    rsf.sftour.tour(list(map(str,source)),'scons -Q www')
    return 0

env = Environment()
env.Command('www',Split(reports),Action(www))

for prog in list(rsf.doc.progs.keys()):
    uses = rsf.doc.progs[prog].uses
    projects = []
    for book in list(uses.keys()):
        for chapter in list(uses[book].keys()):
            projects.extend([os.path.join(book,chapter,x) for x in uses[book][chapter]])
    env.Command(prog+'.test',None,
                Action(progtest,varlist=['projects']),projects=projects)
    env.Alias('test',prog+'.test')
