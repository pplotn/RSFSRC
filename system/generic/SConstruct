import os, sys, re, string, types
sys.path.append('../../framework')
import bldutil

progs = '''
agc aliasp bandpass bin bin1 boxsmooth canny causint clip clip2
cmatmult cmatmult2 cosft costaper deriv dipfilter dsmooth dwt enoint2
equal expl1 expl2 extract fern fft1 fft3 grad2 grad3 heat histogram
igrad intshow inttest1 inttest2 inttest3 impl1 impl2 impl3 iwarp
jacobi jacobi2 lapfill laplac laplac3d linear linefit logwarp lorenz
lpad mandelbrot match matmult max1 miss2 monof monof2 mutter noise
otsu polymask postfilter2 pow reg2tri remap1 roots shapebin shapebin1
sharpen slice smooth smoothder smoothreg2 spectra spectra2 spline
splinefilter swtdenoise t2warp tclip threshold trapez tri2reg trirand
trishape unif2 unif3
'''

# hlinfilter

try:  # distributed version
    Import('env root pkgdir libdir bindir')
    env = env.Clone()
    alias = {'pow':'tpow'}
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')
src.remove(File('predicates.c'))

dynlib = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynlib+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])
    fftwomp = env.get('FFTWOMP')
    if fftwomp:
        env.Prepend(CPPDEFINES=['SF_HAS_FFTW_OMP'])

lapack = env.get('LAPACK')
if lapack:
    env.Prepend(CPPDEFINES=['SF_HAS_LAPACK'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mains = Split(progs)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    main = env.Program(prog,[x + '.c' for x in sources])
    if root:
        install = env.Install(bindir,main[0])

        if dynlib and env['PLATFORM'] == 'darwin':
             env.AddPostAction(install,
             '%s -change build/api/c/libdrsf.dylib '
             '%s/libdrsf.dylib %s' % \
             (WhereIs('install_name_tool'),libdir,install[0]))

        if prog in list(alias.keys()):
            other = str(main[0]).replace(prog,alias[prog])
            install = env.InstallAs(os.path.join(bindir,other),main[0])

            if dynlib and env['PLATFORM'] == 'darwin':
                env.AddPostAction(install,
                '%s -change build/api/c/libdrsf.dylib '
                '%s/libdrsf.dylib %s' % \
                (WhereIs('install_name_tool'),libdir,install[0]))

            if env['PLATFORM'] == 'cygwin':
                other = other.replace('.exe','')
            docalias[other] = 'sf'+prog

for prog in Split('gaussshape2'):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = [x + '.o' for x in sources]
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfgeneric.py'
    
    docs = [env.Doc(prog,'M' + prog) for prog in mains]
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs,alias=docalias)
    
    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
